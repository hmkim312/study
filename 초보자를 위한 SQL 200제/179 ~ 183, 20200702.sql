-- #179 SQL로 머신러닝구현하기(1) : naivebayes
-- DBMS_DATA_MINING을 이용하여 독감환자와 아닌 환자를 구분
-- 테이블 생성
CREATE TABLE NAIVE_FLU_TRAIN
(PATIENT_ID     NUMBER(10),
 CHILLS         VARCHAR2(2),
 RUNNY_NOSE     VARCHAR2(2),
 HEADACHE       VARCHAR2(10),
 FEVER          VARCHAR2(2),
 FLU            VARCHAR2(2));

INSERT INTO NAIVE_FLU_TRAIN VALUES(1,'Y','N','MILD','Y','N');
INSERT INTO NAIVE_FLU_TRAIN VALUES(2,'Y','Y','NO'	,'N', 'Y');
INSERT INTO NAIVE_FLU_TRAIN VALUES(3,'Y','N','STRONG','Y','Y');
INSERT INTO NAIVE_FLU_TRAIN VALUES(4,'N','Y','MILD','Y','Y');
INSERT INTO NAIVE_FLU_TRAIN VALUES(5,'N','N','NO','N','N');
INSERT INTO NAIVE_FLU_TRAIN VALUES(6,'N','Y','STRONG','Y','Y');
INSERT INTO NAIVE_FLU_TRAIN VALUES(7,'N','Y','STRONG','N','N');
INSERT INTO NAIVE_FLU_TRAIN VALUES(8,'Y','Y','MILD','Y','Y');
COMMIT;

SELECT * FROM  NAIVE_FLU_TRAIN;

-- 학습한 머신러닝 모델을 테스트할 테이블 생성
CREATE TABLE NAIVE_FLU_TEST
( PATIENT_ID    NUMBER(10), 	
  CHILLS       VARCHAR2(2),
  RUNNY_NOSE  VARCHAR2(2),
  HEADACHE    VARCHAR2(10),
  FEVER        VARCHAR2(2),
  FLU          VARCHAR2(2));

INSERT INTO NAIVE_FLU_TEST VALUES(9,'Y','N','MILD','N', NULL);
COMMIT;

SELECT * FROM  NAIVE_FLU_TEST;

-- 머신러닝 모델 환경 설정 테이블 생성
CREATE TABLE SETTINGS_GLM
AS
SELECT *
   FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
   WHERE SETTING_NAME LIKE '%GLM%';

BEGIN
   INSERT INTO SETTINGS_GLM
        VALUES (DBMS_DATA_MINING.ALGO_NAME, 'ALGO_NAIVE_BAYES');

   INSERT INTO SETTINGS_GLM
        VALUES (DBMS_DATA_MINING.PREP_AUTO, 'ON');
   COMMIT;
END;
/

-- 머신러닝 모델 생성
BEGIN
  DBMS_DATA_MINING.DROP_MODEL('MD_CLASSIFICATION_MODEL');
END;
/

BEGIN 
   DBMS_DATA_MINING.CREATE_MODEL(
      MODEL_NAME           => 'MD_CLASSIFICATION_MODEL',
      MINING_FUNCTION      => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'NAIVE_FLU_TRAIN',
      CASE_ID_COLUMN_NAME   => 'PATIENT_ID',
      TARGET_COLUMN_NAME   => 'FLU',
      SETTINGS_TABLE_NAME   => 'SETTINGS_GLM');
END;
/

-- 머신러닝 모델이 잘 생성되었는지 확인
SELECT MODEL_NAME,
          ALGORITHM,
          MINING_FUNCTION
  FROM ALL_MINING_MODELS
  WHERE MODEL_NAME = 'MD_CLASSIFICATION_MODEL';

-- 나이브 베이즈 머신러닝 모델이 테스트 데이터에 대해 예측한 값을 확인
SELECT T.*,
  PREDICTION (MD_CLASSIFICATION_MODEL USING *) 예측값
  FROM NAIVE_FLU_TEST T;
  
-- #180 SQL로 머신러닝 구현하기(2) : NAIVEBAYES
-- 답변을 받아 출력하는 PL/SQL 프로그래밍
SET SERVEROUTPUT ON
SET VERIFY OFF

ACCEPT P_CHILLS PROMPT '오한이 있습니까?(Y/N)'
ACCEPT P_RUNNY_NOSE PROMPT '콧물이 있습니까?(Y/N)'
ACCEPT P_HEAD_ACHE PROMPT '두통이 있습니까?(STRONG/MILD/NO)'
ACCEPT P_FEVER PROMPT '열이 있습니까?(Y/N)'

DECLARE
    V_PRED  VARCHAR2(20);
    V_PROB  NUMBER(10,2);
BEGIN
WITH TEST_DATA AS (SELECT UPPER('&P_CHILLS') CHILLS,
                            UPPER('&P_RUNNY_NOSE') RUNNY_NOSE,
                            UPPER('&P_HEAD_ACHE') HEADACHE,
                            UPPER('&P_FEVER') FEVER
                        FROM DUAL)
SELECT PREDICTION (MD_CLASSIFICATION_MODEL USING *),
        PREDICTION_PROBABILITY(MD_CLASSIFICATION_MODEL USING *) INTO V_PRED, V_PROB
FROM TEST_DATA;

 IF V_PRED = 'Y' THEN
     DBMS_OUTPUT.PUT_LINE('머신러닝이 예측한 결과 : 독감입니다.
                             독감일 확률은 '||ROUND(V_PROB,2) * 100 ||'% 입니다');
 ELSE
    DBMS_OUTPUT.PUT_LINE('머신러닝이 예측한 결과 : 독감이 아닙니다.
                             독감이 아닐 확률은 '||ROUND(V_PROB,2) * 100 ||'% 입니다');
 END IF;
END;
/

-- #SQL로 머신러닝 구현하기(3) : NAIVEBAYES
-- 나이브베이즈로 독버섯 구별하기
-- 버섯데이터 테이블 생성 후 MUSHROOM DATA LOAD
CREATE TABLE MUSHROOMS 
( ID                           NUMBER(10),        
TYPE                          VARCHAR2(10),                    
CAP_SHAPE	       VARCHAR2(10),      
CAP_SURFACE	       VARCHAR2(10),      
CAP_COLOR	       VARCHAR2(10),      
BRUISES	                   VARCHAR2(10),
ODOR	                   VARCHAR2(10),
GILL_ATTACHMENT	       VARCHAR2(10),      
GILL_SPACING	       VARCHAR2(10),      
GILL_SIZE	                   VARCHAR2(10),      
GILL_COLOR	       VARCHAR2(10),      
STALK_SHAPE	       VARCHAR2(10),      
STALK_ROOT	       VARCHAR2(10),      
STALK_SURFACE_ABOVE_RING      VARCHAR2(10),      
STALK_SURFACE_BELOW_RING      VARCHAR2(10),      
STALK_COLOR_ABOVE_RING         VARCHAR2(10),      
STALK_COLOR_BELOW_RING	       VARCHAR2(10),      
VEIL_TYPE	                   VARCHAR2(10),      
VEIL_COLOR	                   VARCHAR2(10),      
RING_NUMBER	                   VARCHAR2(10),      
RING_TYPE	                   VARCHAR2(10),      
SPORE_PRINT_COLOR	       VARCHAR2(10),      
POPULATION	                   VARCHAR2(10),        
HABITAT                                 VARCHAR2(10) );

SELECT COUNT(*)  FROM MUSHROOMS;

-- 버섯 데이터를 훈련데이터와 테스트 데이터 9대 1비율로 나눔
CREATE TABLE MUSHROOMS_TRAINING 
AS
SELECT *
  FROM MUSHROOMS
  WHERE ID < 7312;

CREATE TABLE MUSHROOMS_TEST
AS
   SELECT *
     FROM MUSHROOMS
    WHERE ID >= 7312;
    
-- 머신러닝 모델 환경 설정 테이블 생성
CREATE TABLE SETTINGS_GLM
AS
SELECT *
    FROM TABLE(DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
    WHERE SETTING_NAME LIKE '%GLM%';
BEGIN
    INSERT INTO SETTINGS_GLM
        VALUES (DBMS_DATA_MINING.ALGO_NAME, 'ALGO_NAIVE_BAYES');
    INSERT INTO SETTINGS_GLM
        VALUES (DBMS_DATA_MINING.PREP_AUTO, 'ON');
    COMMIT;
END;
/

-- 머신러닝 모델 생성
BEGIN
  DBMS_DATA_MINING.DROP_MODEL('MD_CLASSIFICATION_MODEL');
END;
/

BEGIN 
   DBMS_DATA_MINING.CREATE_MODEL(
      MODEL_NAME           => 'MD_CLASSIFICATION_MODEL',
      MINING_FUNCTION      => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'MUSHROOMS',
      CASE_ID_COLUMN_NAME   => 'ID',
      TARGET_COLUMN_NAME   => 'TYPE',
      SETTINGS_TABLE_NAME   => 'SETTINGS_GLM');
END;
/

-- 모델 생성 확인
SELECT MODEL_NAME,
        ALGORITHM,
        CREATION_DATE,
        MINING_FUNCTION
    FROM ALL_MINING_MODELS
    WHERE MODEL_NAME = 'MD_CLASSIFICATION_MODEL';
    
-- 모델 구성 정보 확인
SELECT SETTING_NAME, SETTING_VALUE
    FROM ALL_MINING_MODEL_SETTINGS
    WHERE MODEL_NAME = 'MD_CLASSIFICATION_MODEL';
    
-- 테스트 데이터에 대해 예측한 값 확인(4개만)
SELECT ID, CAP_SHAPE, CAP_SURFACE, CAP_COLOR, BRUISES, ODOR, TYPE 실제값,
    PREDICTION (MD_CLASSIFICATION_MODEL USING *) 예측값
        FROM MUSHROOMS_TEST t
        WHERE ID IN (7620,7621,7622,7623);

-- 테스트 데이터에 대해 예측한값 확인(정확도)
SELECT SUM(DECODE(P.MODEL_PREDICT_RESPONSE, I.TYPE, 1,0)) / COUNT(*) 정확도
    FROM (
 SELECT ID,
    PREDICTION (MD_CLASSIFICATION_MODEL USING *) MODEL_PREDICT_RESPONSE
        FROM MUSHROOMS_TEST T) P, MUSHROOMS I
        WHERE P.ID = I.ID;
        
-- #182 SQL로 머신러닝 구현하기(4) : DECISION TREE
-- 의사 결정트리 머신러닝 모델로 퇴사할것으로 예측되는 직원을 예측
-- 머신러닝 모델 데이터 생성
-- 이후 CSV 파일 로드
CREATE TABLE HR_DATA
 ( EMP_ID                       NUMBER,
   SATISFACTION_LEVEL           NUMBER,
   LAST_EVALUATION              NUMBER,
   NUMBER_PROJECT               NUMBER,
   AVERAGE_MONTLY_HOURS        NUMBER,
   TIME_SPEND_COMPANY           NUMBER,
   WORK_ACCIDENT                NUMBER,
   LEFT                         NUMBER,
   PROMOTION_LAST_5YEARS        NUMBER,
   SALES                        VARCHAR2(20),
   SALARY                       VARCHAR2(20));
   
-- 훈련데이터와 테스트 데이터로 분리
CREATE TABLE HR_DATA_MAIN
AS
SELECT *
    FROM HR_DATA;

CREATE TABLE HR_DATA_TRAINING
AS
    SELECT *
        FROM HR_DATA_MAIN
        WHERE EMP_ID < 10500;
        
CREATE TABLE HR_DATA_TEST
AS
    SELECT *
        FROM HR_DATA_MAIN
        WHERE EMP_ID >= 10500;
    
-- 머신러닝 모델의 환경 설정을 위한 정보가 들어있는 테이블 생성
DROP TABLE DTSETTINGS;

CREATE TABLE DTSETTINGS
AS
SELECT *
  FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
  WHERE SETTING_NAME LIKE '%GLM%';

BEGIN
  INSERT INTO DTSETTINGS
    VALUES ('ALGO_NAME', 'ALGO_DECISION_TREE');

  INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.TREE_IMPURITY_METRIC, 'TREE_IMPURITY_ENTROPY');
COMMIT;
END;
/

-- 머신러닝 모델 생성
BEGIN
  DBMS_DATA_MINING.DROP_MODEL('DT_MODEL');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL (
      MODEL_NAME            => 'DT_MODEL',
      MINING_FUNCTION       => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'HR_DATA_TRAINING',
      CASE_ID_COLUMN_NAME   => 'EMP_ID',
      TARGET_COLUMN_NAME    => 'LEFT',
      SETTINGS_TABLE_NAME   => 'DTSETTINGS');
END;

-- 생성된 모델 확인
SELECT MODEL_NAME,
        ALGORITHM,
        MINING_FUNCTION
    FROM ALL_MINING_MODELS
    WHERE MODEL_NAME = 'DT_MODEL';
    
-- 생성된 모델의 환경 설정확인
SELECT SETTING_NAME, SETTING_VALUE
    FROM ALL_MINING_MODEL_SETTINGS
    WHERE MODEL_NAME = 'DT_MODEL';
    
-- 실제 값과 예측 값과 예측 확률을 출력
SELECT EMP_ID, T.LEFT 실제값,
    PREDICTION (DT_MODEL USING *) 예측값,
    PREDICTION_PROBABILITY (DT_MODEL USING *) "모델이 예측한 확률"
    FROM HR_DATA_TEST T;
    
-- 머신러닝 모델의 성능 확인
DROP TABLE HR_DATA_TEST_MATRIX_2;
      
CREATE OR REPLACE VIEW   VIEW_HR_DATA_TEST
AS
SELECT EMP_ID, PREDICTION(DT_MODEL USING *) PREDICTED_VALUE,
          PREDICTION_PROBABILITY(DT_MODEL USING * ) PROBABILITY
  FROM HR_DATA_TEST;
  
SET SERVEROUTPUT ON 

DECLARE
   V_ACCURACY NUMBER;
BEGIN
   DBMS_DATA_MINING.COMPUTE_CONFUSION_MATRIX (
      ACCURACY           => V_ACCURACY,
      APPLY_RESULT_TABLE_NAME      => 'VIEW_HR_DATA_TEST',
      TARGET_TABLE_NAME       => 'HR_DATA_TEST',
      CASE_ID_COLUMN_NAME       => 'EMP_ID',
      TARGET_COLUMN_NAME       => 'LEFT',
      CONFUSION_MATRIX_TABLE_NAME => 'HR_DATA_TEST_MATRIX_2',
      SCORE_COLUMN_NAME       => 'PREDICTED_VALUE',
      SCORE_CRITERION_COLUMN_NAME => 'PROBABILITY',
      COST_MATRIX_TABLE_NAME      => NULL,
      APPLY_RESULT_SCHEMA_NAME    => NULL,
      TARGET_SCHEMA_NAME       => NULL,
      COST_MATRIX_SCHEMA_NAME     => NULL,
      SCORE_CRITERION_TYPE       => 'PROBABILITY');
   DBMS_OUTPUT.PUT_LINE('**** MODEL ACCURACY ****: ' || ROUND(V_ACCURACY,4));
END;
/

-- #183 SQL로 머신러닝 구현하기(5) : DESISION TREE
-- 퇴사자를 예측하는 의사결정 트리 머신러닝 모델의 성능을 높여보자
-- 의사결정 모델의 환경 구성 테이블을 재 구성
DROP TABLE DTSETTINGS2;

CREATE TABLE DTSETTINGS2
AS
SELECT *
  FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
  WHERE SETTING_NAME LIKE '%GLM%';

BEGIN
  INSERT INTO DTSETTINGS2
     VALUES ('ALGO_NAME', 'ALGO_DECISION_TREE');

  INSERT INTO DTSETTINGS2
     VALUES (DBMS_DATA_MINING.TREE_IMPURITY_METRIC, 'TREE_IMPURITY_ENTROPY');

  INSERT INTO DTSETTINGS2
     VALUES (DBMS_DATA_MINING.CLAS_MAX_SUP_BINS, 10000);

  INSERT INTO DTSETTINGS2
     VALUES (DBMS_DATA_MINING.TREE_TERM_MAX_DEPTH, 20);
  
COMMIT;
END;
/

-- 모델 생성
BEGIN
  DBMS_DATA_MINING.DROP_MODEL('DT_MODEL2');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL (
      MODEL_NAME            => 'DT_MODEL2',
      MINING_FUNCTION       => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'HR_DATA_TRAINING',
      CASE_ID_COLUMN_NAME   => 'EMP_ID',
      TARGET_COLUMN_NAME    => 'LEFT',
      SETTINGS_TABLE_NAME   => 'DTSETTINGS2');
END;
/

-- 모델 확인
SELECT MODEL_NAME,
        ALGORITHM,
        MINING_FUNCTION
    FROM ALL_MINING_MODELS
    WHERE MODEL_NAME = 'DT_MODEL2';
    
-- 성능 확인
DROP TABLE HR_DATA_TEST_MATRIX_2;
      
CREATE OR REPLACE VIEW VIEW_HR_DATA_TEST2
AS
SELECT EMP_ID, PREDICTION(DT_MODEL2 USING *) PREDICTED_VALUE,
          PREDICTION_PROBABILITY(DT_MODEL2 USING * ) PROBABILITY
  FROM HR_DATA_TEST;
  
DECLARE
   V_ACCURACY NUMBER;
BEGIN
   DBMS_DATA_MINING.COMPUTE_CONFUSION_MATRIX (
      ACCURACY           => V_ACCURACY,
      APPLY_RESULT_TABLE_NAME => 'VIEW_HR_DATA_TEST2',
      TARGET_TABLE_NAME       => 'HR_DATA_TEST',
      CASE_ID_COLUMN_NAME     => 'EMP_ID',
      TARGET_COLUMN_NAME      => 'LEFT',
      CONFUSION_MATRIX_TABLE_NAME => 'HR_DATA_TEST_MATRIX_2',
      SCORE_COLUMN_NAME       => 'PREDICTED_VALUE',
      SCORE_CRITERION_COLUMN_NAME => 'PROBABILITY',
      COST_MATRIX_TABLE_NAME      => NULL,
      APPLY_RESULT_SCHEMA_NAME    => NULL,
      TARGET_SCHEMA_NAME       => NULL,
      COST_MATRIX_SCHEMA_NAME    => NULL,
      SCORE_CRITERION_TYPE       => 'PROBABILITY');
   DBMS_OUTPUT.PUT_LINE('**** MODEL ACCURACY ****: ' || ROUND(V_ACCURACY,4));
END;
/
